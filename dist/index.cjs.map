{"version":3,"sources":["../src/index.ts","../src/components/bhd.tsx","../src/utils/context.ts","../src/components/contentBlock.tsx","../src/components/context.tsx","../src/utils/url.ts","../src/utils/index.ts"],"sourcesContent":["export * from \"./components/index\";\nexport * from \"./utils/index\";\nexport * from \"./models/index\";\nexport * from \"./types\";\n","import { FC, forwardRef, HTMLProps, useEffect, useState } from \"react\";\nimport { useBhdInternalContext } from \"../utils/context\";\nimport { BhdContentBlockWithBlueprint } from \"../models/contentBlock\";\nimport { BhdContentBlockComponent } from \"./contentBlock\";\n\nexport type BhdComponentProps = {\n  contentBlockId: string;\n};\n\nexport const BhdComponent: FC<BhdComponentProps> = forwardRef<\n  HTMLElement,\n  BhdComponentProps & HTMLProps<HTMLElement>\n>(({ contentBlockId, ...rest }, ref) => {\n  const context = useBhdInternalContext();\n\n  const [contentBlock, setContentBlock] = useState<\n    | {\n        state: \"loading\";\n      }\n    | { state: \"loaded\"; data: BhdContentBlockWithBlueprint }\n    | { state: \"failed\"; reason: string }\n  >({ state: \"loading\" });\n\n  useEffect(() => {\n    context\n      .getContentBlock(contentBlockId)\n      .then((contentBlock) =>\n        setContentBlock({ state: \"loaded\", data: contentBlock }),\n      )\n      .catch((error) =>\n        setContentBlock({ state: \"failed\", reason: \"\" + error }),\n      );\n  }, [contentBlockId, context]);\n\n  if (contentBlock.state === \"loading\") {\n    return <context.loadingComponent {...rest} />;\n  }\n\n  if (contentBlock.state === \"failed\") {\n    // TODO: custom error component\n    return <div {...rest}>Error: {contentBlock.reason}</div>;\n  }\n\n  return (\n    <BhdContentBlockComponent\n      ref={ref}\n      contentBlock={contentBlock.data}\n      {...rest}\n    />\n  );\n});\n","import { AxiosInstance } from \"axios\";\nimport { createContext, ElementType, useContext } from \"react\";\nimport { BhdContentBlockWithBlueprint } from \"../models/contentBlock\";\nimport { BhdBlueprintLut } from \"../types\";\n\nexport type BhdContextType = {\n  accessToken: string;\n  blueprintLut: BhdBlueprintLut;\n  getContentBlock: (id: string) => Promise<BhdContentBlockWithBlueprint>;\n  getAssetUrl: (assetId: string) => string;\n};\n\nexport type BhdInternalContextType = BhdContextType & {\n  axiosInstance: AxiosInstance;\n\n  getBlueprintComponent: (id: string) => BhdBlueprintLut[keyof BhdBlueprintLut];\n\n  loadingComponent: ElementType;\n\n  liveEditEnabled: boolean;\n};\n\nexport const BhdInternalContext = createContext<BhdInternalContextType>(\n  {} as BhdInternalContextType,\n);\n\nexport const useBhdInternalContext = () => useContext(BhdInternalContext);\n","import { forwardRef, HTMLProps } from \"react\";\nimport { BhdContentBlockWithBlueprint } from \"../models/contentBlock\";\nimport { useBhdInternalContext } from \"../utils/context\";\nimport {\n  BhdContentBlockComponentFieldProps,\n  BhdContentBlockComponentRootProps,\n} from \"../types\";\n\nexport type BhdContentBlockInternalComponentProps = {\n  contentBlock: BhdContentBlockWithBlueprint;\n};\n\nexport const BhdContentBlockComponent = forwardRef<\n  HTMLElement,\n  BhdContentBlockInternalComponentProps & HTMLProps<HTMLElement>\n>(({ contentBlock, ...rest }, ref) => {\n  const context = useBhdInternalContext();\n\n  const Component = context.getBlueprintComponent(\n    contentBlock.contentBlockBlueprintId,\n  );\n\n  const bhdField = (fieldName: string): BhdContentBlockComponentFieldProps => ({\n    \"data-bhd-field-name\": fieldName,\n    contentEditable: context.liveEditEnabled,\n  });\n\n  const bhdRoot = (): BhdContentBlockComponentRootProps => ({\n    \"data-bhd-block-id\": contentBlock.id,\n    ...(\"data-bhd-field-name\" in rest\n      ? {\n          \"data-bhd-block-parent-field-name\": rest[\n            \"data-bhd-field-name\"\n          ] as string,\n        }\n      : {}),\n  });\n\n  if (Component) {\n    return (\n      <Component\n        ref={ref}\n        loadingComponent={context.loadingComponent}\n        contentBlock={contentBlock}\n        bhdField={bhdField}\n        bhdRoot={bhdRoot}\n        {...rest}\n      />\n    );\n  }\n\n  return (\n    <p {...bhdRoot()}>\n      No component was registered for the blueprint{\" \"}\n      <strong>{contentBlock.contentBlockBlueprint.name}</strong> (ID:{\" \"}\n      {contentBlock.contentBlockBlueprintId}).\n    </p>\n  );\n});\n","import { ElementType, FC, PropsWithChildren, useEffect, useState } from \"react\";\nimport { BhdInternalContext, BhdInternalContextType } from \"../utils/context\";\nimport axios from \"axios\";\nimport { DEFAULT_BASE_URL } from \"../utils/url\";\nimport { BhdContentBlockWithBlueprint } from \"../models/contentBlock\";\nimport { BhdBlueprintLut } from \"../types\";\n\nexport type BhdContextOptions = {\n  accessToken: string;\n  baseUrl?: string;\n  blueprintLut: BhdBlueprintLut;\n  loadingComponent?: ElementType;\n};\n\nexport const BhdContext: FC<\n  PropsWithChildren<{ options: BhdContextOptions }>\n> = ({ children, options }) => {\n  const [context, setContext] = useState<BhdInternalContextType>(() => {\n    const axiosInstance = axios.create({\n      baseURL: new URL(\"api\", options.baseUrl ?? DEFAULT_BASE_URL).href,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    axiosInstance.interceptors.request.use((config) => {\n      config.headers.Authorization = `Bearer ${context.accessToken}`;\n      return config;\n    });\n\n    return {\n      axiosInstance,\n      getAssetUrl: (assetId: string): string =>\n        new URL(\n          `api/asset/${assetId}?accessToken=${context.accessToken}`,\n          options.baseUrl ?? DEFAULT_BASE_URL,\n        ).href,\n      getContentBlock: (id: string): Promise<BhdContentBlockWithBlueprint> =>\n        context.axiosInstance\n          .get<{ block: BhdContentBlockWithBlueprint }>(`/block/${id}`)\n          .then((res) => res.data.block),\n      getBlueprintComponent: (\n        id: string,\n      ): BhdBlueprintLut[keyof BhdBlueprintLut] => context.blueprintLut[id],\n      loadingComponent: options.loadingComponent ?? (() => <p>Loading...</p>),\n      liveEditEnabled: false,\n      ...options,\n    };\n  });\n\n  useEffect(() => {\n    if (context.liveEditEnabled) document.body.dataset.bhdLiveEdit = \"enabled\";\n    else document.body.dataset.bhdLiveEdit = \"disabled\";\n  }, [context.liveEditEnabled]);\n\n  useEffect(() => {\n    window.addEventListener(\"message\", (e) => {\n      if (e.data === \"bhd-live-edit\") {\n        setContext((prev) => ({ ...prev, liveEditEnabled: true }));\n      }\n    });\n  }, []);\n\n  return (\n    <BhdInternalContext.Provider value={context}>\n      {children}\n    </BhdInternalContext.Provider>\n  );\n};\n","export const DEFAULT_BASE_URL = \"https://bhd.matteolutz.de\";\n","import { BhdContextType, useBhdInternalContext } from \"./context\";\n\nexport { type BhdContextType } from \"./context\";\n\nexport const useBhdContext = (): BhdContextType => {\n  const internalContext = useBhdInternalContext();\n\n  return {\n    accessToken: internalContext.accessToken,\n    blueprintLut: internalContext.blueprintLut,\n    getContentBlock: internalContext.getContentBlock,\n    getAssetUrl: internalContext.getAssetUrl,\n  };\n};\n"],"mappings":"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","names":["import_react","import_react","import_jsx_runtime","contentBlock","import_react","import_jsx_runtime","axios"]}